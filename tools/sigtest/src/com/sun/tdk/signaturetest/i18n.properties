#
# $Id$
#
#
# Copyright 1996-2009 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
#

Main.usage.version=SignatureTest version {0}
Main.usage.variant.command=Use {0} <command> <arguments>
Main.usage.variant.help=or  {0} <command> {1}
Main.usage.variant.canbe=where <command> can be {0} or {1}
Main.usage.variant.canbedev=where <command> can be {0}, {1}, {2} or {3}
Main.command.absent={0} is unavailable in {1}

Setup.msg.ConstantValuesTracked.on=on
Setup.msg.ConstantValuesTracked.off=off

#Setup.error.arg.missingval=Missing value for option {0}.
Setup.error.arg.invalidval=Invalid value for option {0}.
Setup.error.arg.unspecified={0} not specified.
Setup.error.filename.missing=Signature file name not specified
Setup.error.url.invalid=Invalid URL
#Setup.error.mode.notspecified=Please, specify -static or another \"mode\" option obviously to run setup in proper mode
Setup.error.mode.contradict=The {0} and {1} options contradict with each other. Also these options can be specified only once.
Setup.error.testurl.absolutepath={0} option can''t be specified with absolute path {1}
Setup.error.options.cant_be_used_together=The {0} and {1} options can''t be used together.


Setup.usage.version=SignatureTest version {0}
Setup.usage.start=Available options are:
Setup.usage.testurl={0} <url>    Specify the URL of directory location of the signature file(s)
Setup.usage.filename={0} <file>  Specify signature file to be created
Setup.usage.package={0} <name>   Specify package to be tested along with subpackages
Setup.usage.packagewithoutsubpackages={0} <name> Specify package to be tested excluding subpackages
Setup.usage.exclude={0} <name>   Specify package or class, which is not required to be tested
Setup.usage.classpath={0} <path> Specify search path for tested classes
Setup.usage.nonclosedfile={0}    Create file that contains only classes belong to the specified packages
Setup.usage.verbose={0}          Print names of ignored classes
Setup.usage.apiversion={0}       Set API version for signature file
Setup.usage.debug={0}            Enable debug mode (prints stack trace)
Setup.usage.help={0}             Print this text
Setup.usage.end=All options are case-insensitive.


Setup.log.classpath=Class path: \"{0}\"
Setup.log.constantchecking=Constant checking: {0}
Setup.log.invalid.security.classpath=The security constraints does not allow tracking class path.
Setup.log.duplicate.class=Warning: duplicate class found {0}
Setup.log.message.numclasses=Found in total: {0} classes
Setup.log.message.exclude_warning_header=Warning: the created signature file is not transitively-closed.
Setup.log.message.exclude_warning=The signature file contains the following subclasses of excluded {0}:


Setup.error.message.classnotfound=Fatal error: class {0} not found
Setup.error.message.classnotlinked=Class not linked: {0}
Setup.error.message.cantcreatesigfile=problem creating signature file.
Setup.report.message.selectedbypackageclasses=Selected by -Package: {0} classes
Setup.report.message.excludedbypackageclasses=Filtered out by -Exclude: {0} classes
Setup.report.message.outerclasses=Written to sigfile: {0} classes
Setup.report.message.innerclasses= (and {0} inner classes)
Setup.report.message.nontigerclass=Non-Tiger class found: {0}
Setup.report.message.emptysigfile=Empty sigfile created
Setup.report.message.numerrors={0} errors
Setup.report.ignore.protect={0} is not public or protected.
Setup.report.ignore.notreqpackage={0} is not from required packages.


#SetupAndTest.error.message.option.missing=Missing value for option {0}
#SetupAndTest.error.message.option.invalid=Incorrect option: {0}
SetupAndTest.error.message.tempfile=Can''t create temporary signature file: {0}
SetupAndTest.message.invoke.setup=Invoke Setup ...
SetupAndTest.message.invoke.sigtest=Invoke SignatureTest ...


SetupAndTest.usage.version=SignatureTest version {0}
SetupAndTest.usage.start=Available options are:
SetupAndTest.usage.reference={0} <path> Specify search path for reference classes
SetupAndTest.usage.test={0} <path>      Specify search path for tested classes
SetupAndTest.usage.filename={0} <file>  Specify signature file name (optional)
SetupAndTest.usage.package={0} <name>   Specify package to be tested along with subpackages
SetupAndTest.usage.packagewithoutsubpackages={0} <name> Specify package to be tested excluding subpackages
SetupAndTest.usage.exclude={0} <name>   Specify package or class, which is not required to be tested
SetupAndTest.usage.verbose={0}          Enable extended diagnostics for Setup and SignatureTest
SetupAndTest.usage.checkvalue={0}       Check values of primitive constants
SetupAndTest.usage.out={0} <name>       Specify report file name for SignatureTest
SetupAndTest.usage.formatplain={0}      Don''t sort error messages
SetupAndTest.usage.classcachesize={0} <numb> Specify size of class cache (default value is {1})
SetupAndTest.usage.help={0}             Print this text

SigTest.error.arg.invalid=Invalid value for option: {0}

#SigTest.error.mgr.linkerr=LinkageError
#SigTest.error.mgr.linkerr.acc=can''t track accessibility : {0} thrown
SigTest.error.mgr.linkerr.loadstatic=Can''t create BaseClassDescrLoader in static mode
SigTest.error.mgr.linkerr.loadreflect=Can''t create BaseClassDescrLoader in reflect mode

SigTest.error.class.missing=Class not found: {0}
SigTest.error.class.notlinked=Class not linked: {0}
SigTest.error.cant_load.plugin=Can''t load plugin {0}
SigTest.warning=Warning: {0} 

SignatureTest.error.arg.invalid=Invalid value for option: {0}
SignatureTest.error.out.invfile=Invalid {0} file name
#SignatureTest.error.url.missing=URL not specified
#SignatureTest.error.sigfile.missing=Signature file name not specified
#SignatureTest.error.url.invalid=Invalid URL
#SignatureTest.error.sigfile.unreadable=Can''t read specification file.
SignatureTest.error.sec.newclasses=The security constraint does not allow tracking class path for tracking of the added new classes.
SignatureTest.error.classpath.unspec=Class path not specified or incorrect in the static mode.
SignatureTest.error.sigfile.invalid=Can not find or read signature file(s): {0}
SignatureTest.error.sigfile.prob=Problem with signature file
SignatureTest.error.sigfile.sec=Security constraints does not allow to read from signature file

SignatureTest.error.non_transitively_closed_set=Required classes not found!
SignatureTest.error.required_classes_missing=The following classes are required, but missing in the signature files:
SignatureTest.error.tmpsigfile=Error during creating file

SignatureTest.error.unknownerror=Unknown error:

SignatureTest.error.sigfile.oome=OutOfMemoryError
SignatureTest.error.sigfile.soe=StackOverflowError
SignatureTest.error.sigfile.vme=VirtualMachineError {0}
SignatureTest.error.static.missing_option={0} option must be specified in static mode
#SignatureTest.error.static.filename_option={0} option allows only one filename
SignatureTest.error.options.filename_options={0} or {1} option must be specified


SignatureTest.mesg.sigfile.noconst=The signature file does not contain constant values

SignatureTest.mesg.sigtest.report=SignatureTest report
SignatureTest.mesg.sigtest.testvers=Tested version: {0}
SignatureTest.mesg.sigtest.basevers=Base version: {0}
#SignatureTest.mesg.sigtest.checkmode=Check mode: {0}
SignatureTest.mesg.sigtest.checkmode.norm=Check mode: {0} [throws normalized]
SignatureTest.mesg.sigtest.checkmode.removed=Check mode: {0} [throws removed]
SignatureTest.mesg.sigtest.constcheck=Constant checking: {0}
SignatureTest.mesg.sigtest.tigercheck=Tiger features are not checked

SignatureTest.mesg.sigtest.constcheck.on=on
SignatureTest.mesg.sigtest.constcheck.off=off
SignatureTest.mesg.failed={0} errors
SignatureTest.mesg.linkerr.thrown= thrown {0}
SignatureTest.mesg.linkerr.notlink= {0} not linked
SignatureTest.mesg.classpath.sec=The security constraints does not allow to inspect class path.
SignatureTest.mesg.verbose.check=Checking class {0}
SignatureTest.mesg.verbose.checkAddedClass=Class (added) ''{0}'' was excluded due: ''{1}''
SignatureTest.mesg.verbose.verifyClass=Class ''{0}'' was excluded due: ''{1}''
SignatureTest.mesg.verbose.verifyMember=In class ''{0}'' member ''{1}'' was excluded due: ''{2}''
SignatureTest.mesg.verbose.verifyMember2=In class ''{0}'' member ''{1}'' was excluded due: ''{2}''
SignatureTest.mesg.see_log=See log {0} for more details.

Sigtest.usage.delimiter=------------------
SignatureTest.usage.version=SignatureTest version {0}
SignatureTest.usage.start=Available options are:
SignatureTest.usage.testurl={0} <url>    Specify URL of signature file
SignatureTest.usage.filename={0} <file>  Specify signature file name
SignatureTest.usage.or=or
SignatureTest.usage.files={0} <filelist> Specify list of signature files. Use {1} to separate files.
SignatureTest.usage.package={0} <name>   Specify package to be tested along with subpackages
SignatureTest.usage.packagewithoutsubpackages={0} <name> Specify package to be tested excluding subpackages
SignatureTest.usage.exclude={0} <name>   Specify package or class, which is not required to be tested
SignatureTest.usage.classpath={0} <path> Specify search path for tested classes in static mode
SignatureTest.usage.out={0} <file>       Specify report file name
SignatureTest.usage.static={0}           Run SignatureTest in static mode (default: reflection)
SignatureTest.usage.nomerge={0}          Cancels default merging according to the JSR 68 rules (see User''s Guide)
SignatureTest.usage.apiversion={0} <str> Set API version for report
#SignatureTest.usage.allpublic={0}        Test public/protected nested classes, which are members of default scope classes
SignatureTest.usage.checkvalue={0}       Check values of primitive constants (static mode only)
SignatureTest.usage.mode={0} [src|bin]   Select checking mode - source code or binary (default: source)
SignatureTest.usage.classcachesize={0} <numb>  Specify size of class cache (default value is {1}). Actual in static mode only.
SignatureTest.usage.formatplain={0}      Do not sort error messages
SignatureTest.usage.extinterfaces={0} Allow extensible interfaces for backward compatibility checking 
SignatureTest.usage.human={0} | {1} Human readable error output
SignatureTest.usage.backward={0} | {1}    Backward compatibility checking (default: mutual compatibility)
SignatureTest.usage.verbose={0}          Enable error diagnostics for inherited class members
SignatureTest.usage.debug={0}            Enable debug mode (prints stack trace)
SignatureTest.usage.help={0}             Print this text
SignatureTest.usage.end=All options are case-insensitive.

Result.code.passed=Passed.
Result.code.failed=Failed.
Result.code.error=Error.
Result.code.notrun=Not run.
Result.message.status=STATUS:{0}{1}


Converter.message.startup=Convert signature file v2.1 to version 4.0
Converter.message.success_conversion=Done.
Converter.usage.start=Available options are:
Converter.usage.oldfilename={0} <file> Specify v2.1 signature file name
Converter.usage.newfilename={0} <file> Specify output file name (v4.0 format)

Merge.usage.write={0} <file>     Specify where to place generated sigfile
Merge.usage.binary={0}           Specify mode of merging
Merge.usage.files={0} <file>     Specify where to find input sigfiles
Merge.warning.message.classnotfound=Warning: class {0} not found
Merge.notunique.writefile=Write file must be different from files in -Files option
Merge.could.not.create.write.file=Could not create write file
Merge.could.not.resolve.file=Could not resolve {0} file
