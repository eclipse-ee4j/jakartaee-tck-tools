// Use the same delimiters as used in the java CTS templates
delimiters "#", "#"

testIf(attr1, attr2) ::= <<
#if(attr1)#Saw #attr1#
#elseif(attr2)#Saw #attr2#
#else#Saw default
#endif#

>>

testAltIf(a, b, c, d) ::= <<
#if((!a||b)&&!(c||d))#broken#else#works#endif#
>>

method(name,body,return,arg) ::= <<
int #name#(int #arg#) {
  #body#
  #return#
}
>>

mult2x(arg) ::= <<
#method(name="mult2x", body={x*=2;}, return={return x;}, arg="x")#
>>

/*
 example of generating the code to add modules to an ear
 ear = EnterpriseArchive module var name
 modules = list of other archive module names
 */
addModules(ear, modules) ::= <<
#modules :{ m |
    #ear#.addAsModule(#m#);
    }
#
>>
addModulesFromPkg(ear, pkg) ::= <<
#pkg.modules :{ m |
    #ear#.addAsModule(#m#);
    }
#
>>

// deployment is an tck.conversion.ant.st4.DeploymentRecord instance
genMethodVehicle(deployment, testClass) ::= <<
    static final String VEHICLE_ARCHIVE = "#deployment.name#_#deployment.vehcile#_vehicle";
    @TargetsContainer("tck-#deployment.protocol#")
    @OverProtocol("#deployment.protocol#"")
    @Deployment(name = VEHICLE_ARCHIVE)
#if(deployment.hasEar)#Saw #attr1#
    public static EnterpriseArchive createDeploymentVehicle() {
#else#
    public static WebArchive createDeploymentVehicle() {
#endif#
#if(deployment.hasWar)#
    #genWar(deployment.war, testClass)#
#endif#

#if(deployment.hasEar)#Saw #attr1#
        reeturn #deployment.ear.typedArchiveName#;
#else#
        reeturn #deployment.war.typedArchiveName#;
#endif#
    }
>>

genMethodNonVehicle(pkg, deployment, testClass) ::= <<
    @TargetsContainer("tck-#deployment.protocol#")
    @OverProtocol("#deployment.protocol#")
    @Deployment(name = "#deployment.name#")
#if(deployment.hasEar)#
    public static EnterpriseArchive createDeployment() {
#else#
    public static WebArchive createDeploymentVehicle() {
#endif#

#if(deployment.hasWar)#
    // War
    #genWar(deployment.war, testClass)#
#endif#

#if(deployment.hasClientJar)#
    // Client
    #genClientJar(deployment.clientJar, testClass)#
#endif#

#if(deployment.hasEjbJar)#
    // Ejb
    #genEjbJar(deployment.ejbJar, testClass)#
#endif#

#if(deployment.hasRar)#
    // Rar
    #genRar(deployment.rar, testClass)#
#endif#

#if(deployment.hasEar)#
    // Ear
    #genEar(pkg, deployment.ear)#
    return #deployment.ear.typedArchiveName#;
#else#
    return #deployment.war.typedArchiveName#;
#endif#
    }
>>

// war is an tck.jakarta.platform.ant.War instance
genWar(war, testClass) ::= <<
      // the war with the correct archive name
      WebArchive #war.typedArchiveName# = ShrinkWrap.create(WebArchive.class, VEHICLE_ARCHIVE+"#war.archiveSuffix#");
      // The class files
      #war.typedArchiveName#.addClasses(
        #war.classFilesString#
      );
      // The ejb-jar.xml descriptor
      URL resURL = #testClass#.class.getResource("/#war.relativeDescriptorPath#");
      if(resURL != null) {
          #war.typedArchiveName#.addAsWebInfResource(resURL, "#war.internalDescriptorName#");
      }
      // TODO, does the sun-ejb-jar.xml file need to be added or should this be in in the vendor Arquillian extension?
>>

// rar is an tck.jakarta.platform.ant.Rar instance
genRar(rar, testClass) ::= <<
    // the jar with the correct archive name
    JavaArchive #rar.typedArchiveName# = ShrinkWrap.create(JavaArchive.class, "#rar.fullArchiveName#");
    // The class files
    #rar.typedArchiveName#.addClasses(
        #rar.classFilesString#
    );
    // The ra-jar.xml descriptor
    URL raResURL = #testClass#.class.getResource("/#rar.relativeDescriptorPath#");
    if(raResURL != null) {
      #rar.typedArchiveName#.addAsManifestResource(raResURL, "ra.xml");
    }
    // The sun-ra.xml file
    raResURL = #testClass#.class.getResource("/#rar.relativeDescriptorPathNoXml#.jar.sun-ra.xml");
    if(raResURL != null) {
      #rar.typedArchiveName#.addAsManifestResource(raResURL, "sun-ra.xml");
    }
>>
