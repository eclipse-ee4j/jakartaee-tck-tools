// A Stringtemplate4 group for the ts.rar.xml logic for creating a ra-jar artifact
delimiters "#", "#"


// rar is an tck.jakarta.platform.ant.Rar instance
// A rar is a jar inside of a rar with an ra.xml descriptor
genRar(rar, testClass) ::= <<
    // the jar with the correct archive name
    JavaArchive #rar.typedArchiveName#_jar = ShrinkWrap.create(JavaArchive.class, "#rar.typedArchiveName#.jar");
    // The class files
    #rar.typedArchiveName#_jar.addClasses(
        #rar.classFilesString#
    );
#if(rar.hasAnonymousClasses)#
#rar.anonymousClasses :{ c |
    #rar.typedArchiveName#.addClass("#c#");
}#
#endif#
    JavaArchive #rar.typedArchiveName# = ShrinkWrap.create(JavaArchive.class, "#rar.fullArchiveName#");
    #rar.typedArchiveName#.add(#rar.typedArchiveName#_jar, #rar.typedArchiveName#_jar.getName(), ZipExporter.class);
    // The ra-jar.xml descriptor
    URL raResURL = #testClass#.class.getResource("/#rar.relativeDescriptorPath#");
    if(raResURL != null) {
      #rar.typedArchiveName#.addAsManifestResource(raResURL, "ra.xml");
    }
    // The sun-ra.xml file
    raResURL = #testClass#.class.getResource("/#rar.relativeDescriptorPathNoXml#.jar.sun-ra.xml");
    if(raResURL != null) {
      #rar.typedArchiveName#.addAsManifestResource(raResURL, "sun-ra.xml");
      archiveProcessor.processRarArchive(#rar.typedArchiveName#, #testClass#.class, raResURL);
    }
>>
