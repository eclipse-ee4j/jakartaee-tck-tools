// A Stringtemplate4 group for the ts.clientjar.xml logic for creating a application-client artifact
delimiters "#", "#"


// client is an tck.jakarta.platform.ant.client instance
genClientJar(client, testClass) ::= <<
    // the jar with the correct archive name
    JavaArchive #client.typedArchiveName# = ShrinkWrap.create(JavaArchive.class, "#client.fullArchiveName#");
    // The class files
    #client.typedArchiveName#.addClasses(
    #client.classFilesString#
    );
#if(client.hasAnonymousClasses)#
#client.anonymousClasses :{ c |
    #client.typedArchiveName#.addClass("#c#");
}#
#endif#
    // The application-client.xml descriptor
    URL resURL = #testClass#.class.getResource("/#client.relativeDescriptorPath#");
    if(resURL != null) {
      #client.typedArchiveName#.addAsManifestResource(resURL, "application-client.xml");
    }
    // The sun-application-client.xml file need to be added or should this be in in the vendor Arquillian extension?
    resURL = #testClass#.class.getResource("/#client.relativeDescriptorPathNoXml#.jar.sun-application-client.xml");
    if(resURL != null) {
      #client.typedArchiveName#.addAsManifestResource(resURL, "application-client.xml");
      archiveProcessor.processClientArchive(#client.typedArchiveName#, #testClass#.class, resURL);
    }
    #client.typedArchiveName#.addAsManifestResource(new StringAsset("Main-Class: " + #testClass#.class.getName() + "\n"), "MANIFEST.MF");

>>
