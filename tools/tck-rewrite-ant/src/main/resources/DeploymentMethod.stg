// A Stringtemplate4 group for generating the arquillian deployment method
delimiters "#", "#"

import "TsClientJar.stg"
import "TsEar.stg"
import "TsEjbJar.stg"
import "TsPar.stg"
import "TsRar.stg"
import "TsWar.stg"

/**
    This template generates the Arquillian @Deployment method based on the information in the pkg
    and deployment parameters.

    pkg is a tck.jakarta.platform.ant.PackageTarget
    deployment is an tck.jakarta.platform.ant.api.DeploymentInfo instance
    testClass is the simple name of the unit test class
*/
genMethodVehicle(pkg, deployment, testClass) ::= <<
    static final String VEHICLE_ARCHIVE = "#deployment.name#_#deployment.vehicle#_vehicle";

#if(deployment.hasDeploymentDescriptors)#
    /**
    #deployment.deploymentDescriptors#
    */
#endif#
    @TargetsContainer("tck-#deployment.protocol#")
    @OverProtocol("#deployment.protocol#")
    @Deployment(name = VEHICLE_ARCHIVE, order = 2)
#if(deployment.hasEar)#
    public static EnterpriseArchive createDeploymentVehicle(@ArquillianResource TestArchiveProcessor archiveProcessor) {
#else#
    public static WebArchive createDeploymentVehicle(@ArquillianResource TestArchiveProcessor archiveProcessor) {
#endif#

#if(deployment.hasWar)#
    // War
    #genWar(deployment.war, testClass)#
#endif#

#if(deployment.hasClientJar)#
    // Client
    #genClientJar(deployment.clientJar, testClass)#
#endif#

#if(deployment.hasEjbJar)#
    // Ejb
    #genEjbJar(deployment.ejbJar, testClass)#
#endif#

#if(deployment.hasRar)#
    // Rar
    #genRar(deployment.rar, testClass)#
#endif#

#if(deployment.hasPar)#
    // Par
    #genPar(deployment.par, testClass)#
#endif#

#if(deployment.hasEar)#
    // Ear
    #genEar(pkg, deployment.ear, testClass)#
    return #deployment.ear.typedArchiveName#;
#else#
    return #deployment.war.typedArchiveName#;
#endif#
    }
>>

genMethodNonVehicle(pkg, deployment, testClass) ::= <<
#if(deployment.hasDeploymentDescriptors)#
    /**
    #deployment.deploymentDescriptors#
    */
#endif#
    @TargetsContainer("tck-#deployment.protocol#")
    @OverProtocol("#deployment.protocol#")
    @Deployment(name = "#deployment.name#", order = 2)
#if(deployment.hasEar)#
    public static EnterpriseArchive createDeployment(@ArquillianResource TestArchiveProcessor archiveProcessor) {
#else#
    public static WebArchive createDeploymentVehicle(@ArquillianResource TestArchiveProcessor archiveProcessor) {
#endif#

#if(deployment.hasWar)#
    // War
    #genWar(deployment.war, testClass)#
#endif#

#if(deployment.hasClientJar)#
    // Client
    #genClientJar(deployment.clientJar, testClass)#
#endif#

#if(deployment.hasEjbJar)#
    // Ejb
    #genEjbJar(deployment.ejbJar, testClass)#
#endif#

#if(deployment.hasRar)#
    // Rar
    #genRar(deployment.rar, testClass)#
#endif#

#if(deployment.hasEar)#
    // Ear
    #genEar(pkg, deployment.ear, testClass)#
    return #deployment.ear.typedArchiveName#;
#else#
    return #deployment.war.typedArchiveName#;
#endif#
    }
>>
