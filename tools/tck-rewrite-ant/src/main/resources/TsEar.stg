// A Stringtemplate4 group for the ts.ear.xml logic for creating a application artifact
delimiters "#", "#"

import "Lib.stg"

/*
    pkg is a a tck.jakarta.platform.ant.PackageTarget instance
    ear is a tck.jakarta.platform.ant.Ear instance
    testClass is the simple name of the unit test class
*/
genEar(pkg, ear, testClass) ::= <<
    EnterpriseArchive #ear.typedArchiveName# = ShrinkWrap.create(EnterpriseArchive.class, "#ear.fullArchiveName#");

    // Any libraries added to the ear
    #genLibJars(ear, testClass)#

    // The component jars built by the package target
#pkg.moduleNames :{ m |
    #ear.typedArchiveName#.addAsModule(#m#);
}#
#pkg.parNames :{ m |
    #ear.typedArchiveName#.addAsLibrary(#m#);
}#


    // The application.xml descriptor
    URL earResURL = #testClass#.class.getResource("/#ear.relativeDescriptorPath#");
    if(earResURL != null) {
      #ear.typedArchiveName#.addAsManifestResource(earResURL, "application.xml");
    }
    // The sun-application.xml descriptor
    earResURL = #testClass#.class.getResource("/#ear.relativeDescriptorPathNoXml#.ear.sun-application.xml");
    if(earResURL != null) {
      #ear.typedArchiveName#.addAsManifestResource(earResURL, "sun-application.xml");
    }
    // Call the archive processor
    archiveProcessor.processEarArchive(#ear.typedArchiveName#, #testClass#.class, earResURL);
>>
