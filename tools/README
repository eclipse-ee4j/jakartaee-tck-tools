The tools directory contains all the CTS developer's tools.  This README gives a
brief introduction to each tool.  See the individual tool directories for more
details.

common-utils:  This directory contains Java source files that may be useful to
      	       any tool.  If you have a utility class that may be useful to any
               tool developer this would be a good place to put it.

master-libs :  This directory contains any add-on libraries used by the CTS tools.
               See the README in the directory for the current list of libraries
               available and the current version checked into the gate.  Please be
               aware of license issues before checking anything into this directory.

number-assert: A simple tool that replaces a specified tag with a counter value within
               a text file.  Simple substitution of tag with counter value.  Used to
               number assertions extracted from Javadoc comments.

scripts     :  Any shell scripts that are useful for users of the CTS tools are placed
               in this directory.  Other scripts that execute some subset of the CTS
               tools can also be placed in this directory.  If you add a shell script
               be sure to place a README like section at the top of the script.


xsl-transformer: A simple application that applies a specified XSL stylesheet to a
                 specified XML document.  Results are written to standard out or an
                 optional output file.  There is also a simple GUI that allows users
                 to find XML, XSL, and output files using a file chooser.  The GUI
                 also allows users to specify multiple stylesheets.  If multiple
                 stylesheets are specified they are applied serially starting with
                 the specified input file.  Intermediate results are written to temp
                 files.  Requires J2SE 1.4.

ant-ext     : This directory contains CTS specific Ant extension tasks.

assert-merge: This directory contains an assertion merge tool that allows users to
              specify two API assertion docs and see what has changed from the current
              version to the new version.  Changes noted are new assertions, removed
              assertions, modified assertions, and deprecated assertions.  The input
              files for this tool are usually created using the assert-merge script.
              Only use this tool if you have not hand edited the XML output file
              generated by the assert-gen script.  If you have hand-edited this XML
              document use the assert-merge-edited tool to merge API assertions.

assert-merge-edited: This directory contains an assertion merge tool that allows users to
                     specify two API assertion docs and see what has changed from the current
                     version to the new version.  The only difference between this tool and
                     the assert merge tool is that his tool supports hand edited (read,
                     additional API assertions added by hand) API assertion documents.

legacy-assert: This is an application that will process a set of test classes and
               extract the test tag information for each test.  This includes assertion
               IDs, test strategy, and test class name and test name.  The extracted
               information is then written to an output file that can have various formats.
               Currently the tool supports two formats: an XML file that matches the CTS
               spec assertion DTD and an XML file that is used to determine test coverage
               statistics.  Users can easily add their own output file format (see the
               README in the legacy-assert directory).

assertion-coverage This application produces a report that details assertion coverage
                   for a specific technology area.  The tool works with both spec and
                   API assertions.  The tools takes as input a verified assertion document
                   (either spec or API) and a list of tested assertions.  The tested
                   assertions file (both spec and API) can be generated using the
                   legacy-assert tool with the SplitCoverageHandler (see the README in
                   the legacy-assert directory for details).  The generated report
                   contains the count of various assertion types (tested, untested,
                   untestable, deprecated, removed and optional), a simple coverage
                   statistic, a detailed list of each assertion type, and a two mapping
                   files; one that maps assertion IDs to tests and one that maps tests to
                   assertion IDs.  The report is an HTML page with links to the other
                   test reports.

spec-assert-gen: (under development) This directory contains a tool that helps test
                 developers identify assertions in a specification.  The simple GUI
                 allows developers to highlite assertion text from the spec and have
                 that text written to a file format of their choosing.

spec-diff      : This application takes as input two specification assertion documents
                 and writes the differences between the two files to an output XML file.
                 The tools finds removed assertions, new assertions, and modified
                 assertions.  CTS developers may find the tool useful to determine what
                 has changed from one version of their spec document to the next.  See
                 the README in the spec-diff directory for more details.

api-check      : This is the apiCheck tool created by the JCK tools group.  This tools
                 tests APIs against a reference API.  We controlled the source because
                 minor modifications were made to allow apiCheck to operate within a
                 J2EE container.  The web page for apiCheck is 
                 http://javaweb.eng/jck/eng/process/apiCheck.html.  The version
                 controlled here is part of the JCTT tools release version 3.1.

tck-rewrite    : An OpenRewrite set of rules that support transforming the legacy JavaTest
                  based test to Junit 5/Arquillian based tests.

sigtest         : This is a fork of the netbeans-apitest repo from https://github.com/jakartaredhat/netbeans-apitest.
